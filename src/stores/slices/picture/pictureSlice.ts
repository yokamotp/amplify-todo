import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../store';

export type PictureState = {
    pictureList: { id: string; content: string; isDone: boolean }[];
};

const initialState: PictureState = {
    pictureList: [],
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
// export const fetchPictureListAsync = createAsyncThunk(
//     'picture/fetchPictureList',
//     async () => {
//         const response = await fetchPictureListApi();
//         // The value we return becomes the `fulfilled` action payload
//         return response;
//     }
// );

export const pictureSlice = createSlice({
    name: 'picture',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {

        fetchPictureRealTime: (state, action) => {
            state.pictureList = [...state.pictureList, action.payload];
        },
        updatePictureRealTime: (state, action) => {
            const targetPicture = state.pictureList.find((picture) => {
                return picture.id === action.payload.id;
            });
            if (targetPicture) {
                targetPicture.isDone = action.payload.isDone;
            }
        },
        deletePictureRealTime: (state, action) => {
            state.pictureList = state.pictureList.filter((picture) => {
                return picture.id !== action.payload.id;
            })
        },

    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
    // extraReducers: (builder) => {
    //     builder
    //         .addCase(fetchPictureListAsync.fulfilled, (state, action) => {
    //             state.pictureList = action.payload;
    //         });
    // },
});

export const { fetchPictureRealTime, updatePictureRealTime, deletePictureRealTime } = pictureSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectPictureList = (state: RootState) => state.picture.pictureList;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//     (amount: number): AppThunk =>
//         (dispatch, getState) => {
//             const currentValue = selectCount(getState());
//             if (currentValue % 2 === 1) {
//                 dispatch(incrementByAmount(amount));
//             }
//         };

export default pictureSlice.reducer;
